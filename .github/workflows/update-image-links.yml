name: Update Githack URLs

on:
  push:
    branches:
      - master # Or your default branch
    paths:
      - 'index.html'
      - 'image-links.html'
      - 'itc-in/**'
      - 'smudge-colors/colors/**'  # Include the colors directory
      - 'spoon.rip/**'
      - 'icons/**'

jobs:
  update-urls:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Update image links
        run: |
          IMAGE_FILES_HTML_PATH="image-links.html"
          WORKSPACE_ROOT="${GITHUB_WORKSPACE}"

          # Find image files in specific directories: smudge-colors/colors, spoon.rip, itc-in, icons
          # Include the colors directory but exclude xcf files for efficiency
          find "${WORKSPACE_ROOT}/smudge-colors/colors" "${WORKSPACE_ROOT}/spoon.rip" "${WORKSPACE_ROOT}/itc-in" "${WORKSPACE_ROOT}/icons" -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.gif" -o -iname "*.svg" -o -iname "*.bmp" -o -iname "*.webp" \) ! -iname "*.xcf" 2>/dev/null > all_images.txt

          # Check file count and warn if very large (but allow processing)
          file_count=$(wc -l < all_images.txt)
          echo "Found $file_count image files"
          if [ "$file_count" -gt 50000 ]; then
            echo "WARNING: Very large number of image files found ($file_count)."
            echo "This may take longer to process but will continue..."
          elif [ "$file_count" -gt 30000 ]; then
            echo "INFO: Large number of image files found ($file_count) - processing efficiently..."
          fi

          # Use awk to process file paths and generate JavaScript array efficiently
          # This avoids all argument list limitations by processing one line at a time
          awk -v workspace_root="${WORKSPACE_ROOT}/" '
          BEGIN {
            print "        const imageFiles = ["
          }
          {
            # Store all lines for processing
            lines[NR] = $0
          }
          END {
            # Process all stored lines
            for (i = 1; i <= NR; i++) {
              # Check if the line starts with workspace_root
              if (index(lines[i], workspace_root) == 1) {
                # Remove workspace root from path to make it relative
                relative_path = substr(lines[i], length(workspace_root) + 1)
              } else {
                # If not absolute path, use as-is
                relative_path = lines[i]
              }
              # Escape quotes in the path
              gsub(/"/, "\\\"", relative_path)
              # Print the array entry, add comma only if not the last line
              if (i < NR) {
                print "            \"" relative_path "\","
              } else {
                print "            \"" relative_path "\""
              }
            }
            # Close the array with proper formatting
            print "        ];"
          }
          ' all_images.txt > temp_imagefiles.js

          # Create a new version of the HTML file with the updated array
          # Use awk for more reliable processing of large files
          
          # Extract everything before the imageFiles array
          awk '/const imageFiles = \[/{exit} {print}' "${IMAGE_FILES_HTML_PATH}" > temp_html_before.txt
          
          # Extract everything after the imageFiles array (skip the array entirely)
          awk '/^        \];/{found=1} found{print}' "${IMAGE_FILES_HTML_PATH}" > temp_html_after.txt
          
          # Combine the parts
          cat temp_html_before.txt temp_imagefiles.js temp_html_after.txt > "${IMAGE_FILES_HTML_PATH}.new"
          
          # Replace the original file
          mv "${IMAGE_FILES_HTML_PATH}.new" "${IMAGE_FILES_HTML_PATH}"
          
          # Clean up temporary files
          rm -f temp_imagefiles.js temp_html_before.txt temp_html_after.txt all_images.txt

          echo "Updated image list in ${IMAGE_FILES_HTML_PATH} with $file_count files"

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add image-links.html
          # Commit only if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "docs: Update image links in image-links.html"
            git push
          else
            echo "No changes to commit for image-links.html"
          fi
