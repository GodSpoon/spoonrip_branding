name: Update Githack URLs

on:
  push:
    branches:
      - master # Or your default branch
    paths:
      - '**/image-links.html'
      - 'itc-in/**'
      - 'smudge-colors/colors/**'  # Include the colors directory
      - 'spoon.rip/**'

jobs:
  update-urls:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Update image links
        run: |
          IMAGE_FILES_HTML_PATH="image-links.html"
          WORKSPACE_ROOT="${GITHUB_WORKSPACE}"

          # Find image files in specific directories: smudge-colors/colors, spoon.rip, itc-in
          # Include the colors directory but exclude xcf files for efficiency
          find "${WORKSPACE_ROOT}/smudge-colors/colors" "${WORKSPACE_ROOT}/spoon.rip" "${WORKSPACE_ROOT}/itc-in" -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.gif" -o -iname "*.svg" -o -iname "*.bmp" -o -iname "*.webp" \) ! -iname "*.xcf" 2>/dev/null > all_images.txt

          # Check file count and warn if very large (but allow processing)
          file_count=$(wc -l < all_images.txt)
          echo "Found $file_count image files"
          if [ "$file_count" -gt 50000 ]; then
            echo "WARNING: Very large number of image files found ($file_count)."
            echo "This may take longer to process but will continue..."
          elif [ "$file_count" -gt 30000 ]; then
            echo "INFO: Large number of image files found ($file_count) - processing efficiently..."
          fi

          # Prepare the new array content for JavaScript
          js_array_content=""
          while IFS= read -r img_file; do
            # Make path relative to GITHUB_WORKSPACE for the JS array
            repo_relative_path="${img_file#${WORKSPACE_ROOT}/}"
            js_array_content+="            \\"${repo_relative_path}\\",\\n"
          done < all_images.txt

          # Remove trailing comma and newline if array is not empty
          if [ -n "$js_array_content" ]; then
            js_array_content=$(echo -e "${js_array_content%,\n}")
          fi

          # Escape for sed: backslashes, forward slashes, ampersands
          escaped_js_array_content=$(echo "$js_array_content" | sed -e 's/[\\/&]/\\&/g')

          # Replace the imageFiles array in image-links.html
          # This sed command looks for the imageFiles array and replaces its content.
          # It handles multi-line replacement using a label and branch in sed.
          sed -i ":a;N;$!ba;s/const imageFiles = \[[^]]*\];/const imageFiles = [\n${escaped_js_array_content}\n        ];/" "${IMAGE_FILES_HTML_PATH}"

          echo "Updated image list in ${IMAGE_FILES_HTML_PATH}"

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add image-links.html
          # Commit only if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "docs: Update image links in image-links.html"
            git push
          else
            echo "No changes to commit for image-links.html"
          fi
